buildscript {
    ext.ktor_version = '1.2.3'
    ext.jackson_version = '2.9.+'
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
}

group 'br.com.challenge'
version '1.0-SNAPSHOT'

apply plugin: 'jacoco'

repositories {
    jcenter()
    mavenCentral()
}

test {
    if (file('variables.env').exists()) {
        file('variables.env').readLines().each() {
            def (key, value) = it.tokenize('=')
            environment(key, value)
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    //ktor
    compile "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    testCompile("io.ktor:ktor-server-test-host:$ktor_version")
    compile 'org.koin:koin-ktor:2.0.1'

    compile group: 'com.github.kittinunf.fuel', name: 'fuel', version: '2.1.0'
    compile 'se.michaelthelin.spotify:spotify-web-api-java:3.0.0'

    //test
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile("io.ktor:ktor-server-test-host:$ktor_version")
    testCompile group: 'io.mockk', name: 'mockk', version: '1.9.3'
    testCompile group: 'org.mock-server', name: 'mockserver-netty', version: '5.6.1'

    //jackson
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"

    compile("ch.qos.logback:logback-classic:1.2.3")
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

tasks.withType(Test) {
    testLogging {
        events "failed", "passed", "skipped", "standard_out"

        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'br.com.challenge.application.ApplicationKt'
        )
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false

        xml.destination file("build/reports/coverage.xml")
    }
}
